{"version":3,"sources":["Component/Card.js","Component/Cardlist.js","Component/Scroll.js","Component/Search.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","name","email","id","className","src","alt","Component","Cardlist","robot","map","user","i","key","Scroll","children","style","overflowY","border","height","Search","type","placeholder","onChange","search","App","handleChange","e","setState","searchField","target","value","console","log","state","robots","fetch","then","response","json","users","filteredRobots","filter","rob","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sNAiBeA,G,kLAbH,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,GACrB,OACE,yBAAKC,UAAU,qDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,SACpD,4BAAKL,GACL,2BAAIC,GACJ,2BAAIC,Q,GAROI,cCuBJC,E,uKAtBH,IACAC,EAAUV,KAAKC,MAAfS,MAER,OACE,6BACE,yBAAKL,UAAU,OACZK,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACET,GAAIM,EAAMG,GAAGT,GACbF,KAAMQ,EAAMG,GAAGX,KACfC,MAAOS,EAAKT,MACZW,IAAKD,a,GAbEL,aCiBRO,E,uKAjBH,IACAC,EAAahB,KAAKC,MAAlBe,SACR,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTJ,EAAU,S,GAXER,aCgBNa,E,uKAbX,OACE,yBAAKhB,UAAU,cACb,2BACEA,UAAU,mCACViB,KAAK,SACLC,YAAY,iBACZC,SAAUxB,KAAKC,MAAMwB,c,GARVjB,aCuDNkB,E,kDAlDb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAiBR0B,aAAe,SAACC,GAGd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,WAC7CC,QAAQC,IAAI,EAAKC,WApBnB,EAAKA,MAAQ,CACXC,OAAQ,GACRN,YAAa,IAJE,E,gEAOE,IAAD,OAClBO,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKZ,SAAS,CAAEO,OAAQK,S,+BAapB,IAAD,OACDC,EAAiB1C,KAAKmC,MAAMC,OAAOO,QAAO,SAACC,GAC/C,OACEA,EAAI1C,KAAK2C,cAAcC,SAAS,EAAKX,MAAML,YAAYe,gBACvDD,EAAIzC,MAAM0C,cAAcC,SAAS,EAAKX,MAAML,YAAYe,kBAG5D,OAAiC,IAA7B7C,KAAKmC,MAAMC,OAAOW,OACb,wBAAI1C,UAAU,MAAd,YAGL,yBAAKA,UAAU,OACb,2CACA,kBAAC,EAAD,CAAQoB,OAAQzB,KAAK2B,eACrB,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAAUjB,MAAOgC,U,GA3CXlC,aCKEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.93eca280.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"tachyons\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    const { name, email, id } = this.props;\r\n    return (\r\n      <div className=\"bg-light-green dib  br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"robo\" />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        <p>{id}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nclass Cardlist extends Component {\r\n  render() {\r\n    const { robot } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n          {robot.map((user, i) => {\r\n            return (\r\n              <Card\r\n                id={robot[i].id}\r\n                name={robot[i].name}\r\n                email={user.email}\r\n                key={i}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cardlist;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Scroll extends Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          border: \"2px solid black\",\r\n          height: \"800px\",\r\n        }}\r\n      >\r\n        {children}{\" \"}\r\n        {/*this allows me to wrapp the scoll com ponent on the card component */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport \"tachyons\";\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"tc mt2 pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots \"\r\n          onChange={this.props.search}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Cardlist from \"../Component/Cardlist\";\n\nimport Scroll from \"../Component/Scroll\";\nimport Search from \"../Component/Search\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  // this a syntehtic event listener\n  handleChange = (e) => {\n    // property.value allows us to get hold of what the person is typing\n\n    this.setState({ searchField: e.target.value }, () => {\n      console.log(this.state);\n    });\n  };\n\n  render() {\n    const filteredRobots = this.state.robots.filter((rob) => {\n      return (\n        rob.name.toLowerCase().includes(this.state.searchField.toLowerCase()) ||\n        rob.email.toLowerCase().includes(this.state.searchField.toLowerCase())\n      ); //the condition in the filter array is that bring me the names of if what we type in the search can be found in the robot data\n    });\n    if (this.state.robots.length === 0) {\n      return <h1 className=\"tc\"> Loading</h1>;\n    } else {\n      return (\n        <div className=\"App\">\n          <h1>ROBOFRIENDS</h1>\n          <Search search={this.handleChange} />\n          <Scroll>\n            {/* over here we are wrapping cardlist component    we can do this cus we need to use this method called props.children in the scroll component */}\n            <Cardlist robot={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./Containers/App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}